	.file	"cp.c"
	.text
	.type	die, @function
die:
.LFB6:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	perror@PLT
	movl	$1, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE6:
	.size	die, .-die
	.type	diefn, @function
diefn:
.LFB7:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	perror@PLT
	movl	$-1, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE7:
	.size	diefn, .-diefn
	.globl	opt_r
	.bss
	.align 4
	.type	opt_r, @object
	.size	opt_r, 4
opt_r:
	.zero	4
	.globl	opt_f
	.align 4
	.type	opt_f, @object
	.size	opt_f, 4
opt_f:
	.zero	4
	.section	.rodata
.LC0:
	.string	"%c: not a valid option\n"
.LC1:
	.string	"fr"
	.text
	.globl	process_opts
	.type	process_opts, @function
process_opts:
.LFB8:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movl	%edi, -20(%rbp)
	movq	%rsi, -32(%rbp)
	jmp	.L6
.L10:
	cmpl	$102, -4(%rbp)
	je	.L7
	cmpl	$114, -4(%rbp)
	jne	.L8
	movl	$1, opt_r(%rip)
	jmp	.L6
.L7:
	movl	$1, opt_f(%rip)
	jmp	.L6
.L8:
	movl	optopt(%rip), %edx
	movq	stderr(%rip), %rax
	leaq	.LC0(%rip), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	movl	$0, %eax
	call	fprintf@PLT
	movl	$-1, %eax
	jmp	.L9
.L6:
	movq	-32(%rbp), %rcx
	movl	-20(%rbp), %eax
	leaq	.LC1(%rip), %rdx
	movq	%rcx, %rsi
	movl	%eax, %edi
	call	getopt@PLT
	movl	%eax, -4(%rbp)
	cmpl	$-1, -4(%rbp)
	jne	.L10
	movl	$0, %eax
.L9:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE8:
	.size	process_opts, .-process_opts
	.section	.rodata
.LC2:
	.string	"Tisknu kundy"
	.text
	.globl	reccpy
	.type	reccpy, @function
reccpy:
.LFB9:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	leaq	.LC2(%rip), %rax
	movq	%rax, %rdi
	call	puts@PLT
	movl	$0, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE9:
	.size	reccpy, .-reccpy
	.section	.rodata
.LC3:
	.string	"reccpy"
.LC4:
	.string	"dst_wr"
	.text
	.globl	copy
	.type	copy, @function
copy:
.LFB10:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$1072, %rsp
	movq	%rdi, -1064(%rbp)
	movq	%rsi, -1072(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	opt_r(%rip), %eax
	cmpl	$1, %eax
	jne	.L17
	movq	-1072(%rbp), %rdx
	movq	-1064(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	reccpy
	cmpl	$-1, %eax
	jne	.L15
	leaq	.LC3(%rip), %rax
	movq	%rax, %rdi
	call	diefn
	jmp	.L19
.L18:
	movq	-1056(%rbp), %rdx
	movq	-1072(%rbp), %rax
	movl	(%rax), %eax
	leaq	-1040(%rbp), %rcx
	movq	%rcx, %rsi
	movl	%eax, %edi
	call	write@PLT
	movq	%rax, -1048(%rbp)
	movq	-1048(%rbp), %rax
	cmpq	-1056(%rbp), %rax
	je	.L17
	leaq	.LC4(%rip), %rax
	movq	%rax, %rdi
	call	diefn
	jmp	.L19
.L17:
	movq	-1064(%rbp), %rax
	movl	(%rax), %eax
	leaq	-1040(%rbp), %rcx
	movl	$1024, %edx
	movq	%rcx, %rsi
	movl	%eax, %edi
	call	read@PLT
	movq	%rax, -1056(%rbp)
	cmpq	$0, -1056(%rbp)
	jg	.L18
.L15:
	movl	$0, %eax
.L19:
	movq	-8(%rbp), %rdx
	subq	%fs:40, %rdx
	je	.L20
	call	__stack_chk_fail@PLT
.L20:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE10:
	.size	copy, .-copy
	.section	.rodata
.LC5:
	.string	"stat"
.LC6:
	.string	"Usage: cp [ARGS] file1 file2\n"
	.align 8
.LC7:
	.string	"%s: is a directory, use recursive mode\n"
.LC8:
	.string	"src_fd"
.LC9:
	.string	"dst_fd"
.LC10:
	.string	"copy"
	.text
	.globl	main
	.type	main, @function
main:
.LFB11:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$192, %rsp
	movl	%edi, -180(%rbp)
	movq	%rsi, -192(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	-180(%rbp), %eax
	cltq
	salq	$3, %rax
	leaq	-16(%rax), %rdx
	movq	-192(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	leaq	-160(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	stat@PLT
	cmpl	$-1, %eax
	jne	.L22
	leaq	.LC5(%rip), %rax
	movq	%rax, %rdi
	call	die
	jmp	.L30
.L22:
	cmpl	$2, -180(%rbp)
	jg	.L24
	movq	stderr(%rip), %rax
	movq	%rax, %rcx
	movl	$29, %edx
	movl	$1, %esi
	leaq	.LC6(%rip), %rax
	movq	%rax, %rdi
	call	fwrite@PLT
	movl	$1, %eax
	jmp	.L30
.L24:
	movl	$577, -168(%rbp)
	movl	$438, -164(%rbp)
	movq	-192(%rbp), %rdx
	movl	-180(%rbp), %eax
	movq	%rdx, %rsi
	movl	%eax, %edi
	call	process_opts
	cmpl	$-1, %eax
	jne	.L25
	movl	$1, %eax
	jmp	.L30
.L25:
	movl	-136(%rbp), %eax
	andl	$61440, %eax
	cmpl	$16384, %eax
	jne	.L26
	movl	opt_r(%rip), %eax
	testl	%eax, %eax
	jne	.L26
	movq	-192(%rbp), %rax
	addq	$8, %rax
	movq	(%rax), %rdx
	movq	stderr(%rip), %rax
	leaq	.LC7(%rip), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	movl	$0, %eax
	call	fprintf@PLT
	movl	$1, %eax
	jmp	.L30
.L26:
	movl	-180(%rbp), %eax
	cltq
	salq	$3, %rax
	leaq	-16(%rax), %rdx
	movq	-192(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	movl	$0, %eax
	call	open@PLT
	movl	%eax, -176(%rbp)
	movl	-176(%rbp), %eax
	cmpl	$-1, %eax
	jne	.L27
	leaq	.LC8(%rip), %rax
	movq	%rax, %rdi
	call	die
	jmp	.L30
.L27:
	movl	-180(%rbp), %eax
	cltq
	salq	$3, %rax
	leaq	-8(%rax), %rdx
	movq	-192(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-164(%rbp), %edx
	movl	-168(%rbp), %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	movl	$0, %eax
	call	open@PLT
	movl	%eax, -172(%rbp)
	movl	-172(%rbp), %eax
	cmpl	$-1, %eax
	jne	.L28
	leaq	.LC9(%rip), %rax
	movq	%rax, %rdi
	call	die
	jmp	.L30
.L28:
	leaq	-172(%rbp), %rdx
	leaq	-176(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	copy
	cmpl	$-1, %eax
	jne	.L29
	leaq	.LC10(%rip), %rax
	movq	%rax, %rdi
	call	die
	jmp	.L30
.L29:
	movl	-176(%rbp), %eax
	movl	%eax, %edi
	call	close@PLT
	movl	-172(%rbp), %eax
	movl	%eax, %edi
	call	close@PLT
	movl	$0, %eax
.L30:
	movq	-8(%rbp), %rdx
	subq	%fs:40, %rdx
	je	.L31
	call	__stack_chk_fail@PLT
.L31:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE11:
	.size	main, .-main
	.ident	"GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
